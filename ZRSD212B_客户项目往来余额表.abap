*&---------------------------------------------------------------------*
*& Report ZRSD212B
*&---------------------------------------------------------------------*
*&1、按要求仅按照POSID+KUNNR+VKORG+VTWEG行汇总计算余额
*   1-1 若同一项目WBS对应不同的销售组织、不同的渠道，则会导致取值错误
*   1-2 渠道取值销售开票及发货明细的数据
*   1-3 按照渠道进行权限控制
*   1-4 回款对应的渠道，根据SEGMENT进行逻辑写死。
*&2、已发货未开票的金额根据发货数量*销售单价计算后再汇总
*&---------------------------------------------------------------------*
REPORT ZRSD212B.

TABLES:VBRK,VBRP,VBAK,VBAP,COBL,PRPS,LIKP,LIPS,ZTFI_SPLITCONT,KNA1,ZTPS010A,TVKOT,TCJ1T.

DATA:FIELDCAT TYPE SLIS_T_FIELDCAT_ALV.

DATA: BEGIN OF ITAB OCCURS 0.
DATA: KUNNR   TYPE KNA1-KUNNR,
      NAME1   TYPE KNA1-NAME1,
      POST1   TYPE PRPS-POST1,
      POSID   TYPE PRPS-POSID,
      PSPHI   TYPE PRPS-PSPHI,
      PSPNR   TYPE PRPS-PSPNR,
      PSPID   TYPE PROJ-PSPID,
      ZYK     TYPE DMBTR, "余款
      ZYSJE   TYPE DMBTR, "应收金额
      ZSSJE   TYPE DMBTR, "实收金额
      ZSXJE   TYPE DMBTR, "信用审批金额
      ZHZY    TYPE DMBTR, "综合占用
      SEL,
      ZHTLY   TYPE VBAK-ZHTLY,
      ZYWY    TYPE VBAK-ZYWY,
      ZHTLYT  TYPE KNA1-NAME1,
      ZYWYT   TYPE KNA1-NAME1,
      ZQXGL   TYPE CHAR4,
      VTWEG   TYPE VBAK-VTWEG,
      VTWEGT  TYPE CHAR40,
      VKORG   TYPE VBAK-VKORG,
      VKORGT  TYPE TVKOT-VTEXT,
      ZHHKD   TYPE VBAK-ERDAT, "最后回款日期
      ZHFHD   TYPE VBAK-ERDAT, "最后发货日期
      WERKS   TYPE LIPS-WERKS,
      WERKST  TYPE LIPS-WERKS,
      VKBUR   TYPE  VBAK-VKBUR,
      VKGRP   TYPE VBAK-VKGRP,
      VKBURT  TYPE CHAR40,
      VKGRPT  TYPE CHAR40,
      ZHTH    TYPE VBAK-VBELN,
      PRART   TYPE PRPS-PRART,
      PRARTT  TYPE TCJ1T-PRATX,
      BSTNK   TYPE VBAK-BSTNK,
      ZWGBGRQ TYPE VBAK-ERDAT,
      ZSFHG   TYPE CHAR2,
      ZPZSJ   TYPE VBAK-ERDAT,
      ZXMWGRQ TYPE ZTPS010A-ZXMWGRQ, "项目完工日期
      END OF ITAB.

DATA: BEGIN OF IT_VBRP OCCURS 0 .
DATA: VBELP     TYPE VBRK-VBELN,
      POSNP     TYPE VBRP-POSNR,
      VBTYP_ANA TYPE VBRP-VBTYP_ANA,
      VBELV     TYPE VBRP-VGBEL,
      POSNV     TYPE VBRP-VGPOS,
      AUBEL     TYPE VBRP-AUBEL,
      AUPOS     TYPE VBRP-AUPOS,
      FKIMG     TYPE VBRP-FKIMG,
      KZWI1     TYPE VBRP-KZWI1,
      PSPNR     TYPE VBRP-PS_PSP_PNR,
      FKART     TYPE VBRK-FKART,
      FKDAT     TYPE VBRK-FKDAT,
      KUNNR     TYPE VBRK-KUNRG,
      ERNAM     TYPE VBAK-ERNAM,
      MATNR     TYPE VBAP-MATNR,
      ZZL1      TYPE MARA-ZZL1,
      MAKTX     TYPE CHAR200,
      NAME1     TYPE KNA1-NAME1,
      POSID     TYPE PRPS-POSID,
      PRART     TYPE PRPS-PRART,
      POST1     TYPE PRPS-POST1,
      ZKFNR     TYPE ZTPS010A-ZKFNR,
      PSPID     TYPE PROJ-PSPID,
      PSPHI     TYPE PRPS-PSPHI,
      VKORG     TYPE VBAK-VKORG,
      VKORGT    TYPE TVKOT-VTEXT,
      VKBUR     TYPE VBAK-VKBUR,     "销售部门
      VKBURT    TYPE TVKBT-BEZEI,     "销售部门描述
      VKGRP     TYPE VBAK-VKGRP,     "销售组
      VKGRPT    TYPE TVKBT-BEZEI,     "销售组描述
      WERKS     TYPE LIPS-WERKS,
      VTWEG     TYPE VTWEG,
      END OF IT_VBRP.

DATA: BEGIN OF IT_LIPS OCCURS 0 .
DATA:
  VBELN     TYPE VBRP-VGBEL,
  POSNR     TYPE VBRP-VGPOS,
  VGBEL     TYPE VBRP-AUBEL,
  VGPOS     TYPE VBRP-AUPOS,
  LFIMG     TYPE VBRP-FKIMG,
  PSPNR     TYPE VBRP-PS_PSP_PNR,
  LFART     TYPE LIKP-LFART,
  KUNNR     TYPE VBRK-KUNRG,
  ERNAM     TYPE VBAK-ERNAM,
  MATNR     TYPE VBAP-MATNR,
  WERKS     TYPE LIPS-WERKS,
  WADAT_IST TYPE LIKP-WADAT_IST,
  VTWEG     TYPE VBAK-VTWEG,
  POSID     TYPE PRPS-POSID,
  POST1     TYPE PRPS-POST1,
  PSPID     TYPE PROJ-PSPID,
  PSPHI     TYPE PRPS-PSPHI,
  PRART     TYPE PRPS-PRART,
  VKORG     TYPE VBAK-VKORG,
  END OF IT_LIPS.

DATA: BEGIN OF IT_HK OCCURS 0 .
DATA: PARTNER TYPE ZTFI_SPLITCONT-PARTNER,
      DMBTR   TYPE ZTFI_SPLITCONT-DMBTR,
      DMBTRB  TYPE ZTFI_SPLITCONT-DMBTRB,
      ZNAME   TYPE ZTFI_SPLITCONT-ZNAME,
      ZDJBH   TYPE ZTFI_SPLITCONT-ZDJBH,
      CFDAT   TYPE ZTFI_SPLITCONT-CFDAT,
      ZSIGN   TYPE ZTFI_SPLITCONT-ZSIGN,
      NAME1   TYPE KNA1-NAME1,
      POSID   TYPE PRPS-POSID,
      POST1   TYPE PRPS-POST1,
      CHGNO_D TYPE ZTFI_SPLITCONT-CHGNO_D,
      ZKFNR   TYPE ZTPS010A-ZKFNR,
      PSPID   TYPE PROJ-PSPID,
      PSPHI   TYPE PRPS-PSPHI,
      PSPNR   TYPE VBRP-PS_PSP_PNR,
      PRART   TYPE PRPS-PRART,
      VKORG   TYPE VBAK-VKORG,
      VKORGT  TYPE TVKOT-VTEXT,
      SEGMENT TYPE ZTFI_SPLITCONT-SEGMENT,
      VTWEG   TYPE VBAK-VTWEG,
      END OF IT_HK.

DATA: BEGIN OF IT_ZFH OCCURS 0 .
DATA: VBELN TYPE VBRK-VBELN,
      POSNR TYPE VBRP-POSNR,
      END OF IT_ZFH.

DATA: BEGIN OF IT_KONV OCCURS 0 .
DATA: VBELN TYPE VBAK-VBELN,
      KPOSN TYPE V_KONV_CDS-KPOSN,
      KBETR TYPE V_KONV_CDS-KBETR,
      KPEIN TYPE V_KONV_CDS-KPEIN,
      END OF IT_KONV.

DATA :BEGIN OF IT_PSPNR OCCURS 0.
DATA: PSPNR TYPE VBAP-PS_PSP_PNR,
      KUNNR TYPE  VBAK-KUNNR,
      POSID TYPE  PRPS-POSID,
      END OF IT_PSPNR.

DATA :BEGIN OF IT_ZHTXX OCCURS 0.
DATA: PSPNR     TYPE VBAP-PS_PSP_PNR,
      KUNNR     TYPE  VBAK-KUNNR,
      WADAT_IST TYPE VBAK-ERDAT,
      ZHTLY     TYPE VBAK-ZHTLY,
      ZYWY      TYPE VBAK-ZYWY,
      VKBUR     TYPE VBAK-VKBUR,
      VKGRP     TYPE VBAK-VKGRP,
      VBELN     TYPE VBAK-VBELN,
      VTWEG     TYPE VBAK-VTWEG,
      WAERK     TYPE VBAK-WAERK,
      END OF IT_ZHTXX.
DATA: BEGIN OF IT_ZHTLY OCCURS 0,
        PSPNR TYPE VBAK-PS_PSP_PNR,
        ZHTLY TYPE VBAK-ZHTLY,
        ZYWY  TYPE VBAK-ZYWY,
        ZHTNM TYPE KNA1-NAME1,
        ZYWNM TYPE KNA1-NAME1,
        ERDAT TYPE VBAK-ERDAT,
      END OF IT_ZHTLY.
DATA: BEGIN OF IT_WAERK OCCURS 0,
        PSPNR TYPE VBRP-PS_PSP_PNR,
        KUNNR TYPE VBAK-KUNNR,
        WAERK TYPE VBAK-WAERK,
        ERDAT TYPE VBAK-ERDAT,
        VBELN TYPE VBAK-VBELN,
      END OF IT_WAERK.
DATA: OUT_PSPID TYPE PS_POSNR.
TYPES:BEGIN OF TY_PSPID,
        PSPID TYPE ZTPS010A-PSPID,
      END OF TY_PSPID.
DATA:GT_PSPID TYPE TABLE OF TY_PSPID WITH KEY PSPID,
     GS_PSPID LIKE LINE OF GT_PSPID.
DATA: IT_VBAP TYPE TABLE OF VBAP WITH HEADER LINE.
DATA: IT_HK1 LIKE TABLE OF IT_HK WITH HEADER LINE.
DATA: IT_HK2 LIKE TABLE OF IT_HK WITH HEADER LINE.
DATA: IT_HK3 LIKE TABLE OF IT_HK WITH HEADER LINE.
DATA: IT_TK LIKE TABLE OF IT_HK WITH HEADER LINE.
DATA: S_PSPNR LIKE RANGE OF PRPS-PSPNR WITH HEADER LINE.
DATA: IT_KNA1 TYPE TABLE OF KNA1 WITH HEADER LINE.
DATA: IT_T001L TYPE TABLE OF T001L WITH HEADER LINE.
DATA: IT_TCJ1T TYPE TABLE OF TCJ1T WITH HEADER LINE.
DATA: IT_T001W TYPE TABLE OF T001W WITH HEADER LINE.
DATA: IT_T023T TYPE TABLE OF T023T WITH HEADER LINE.
DATA: IT_T005U TYPE TABLE OF T005U WITH HEADER LINE.
DATA: IT_TVAKT TYPE TABLE OF TVAKT WITH HEADER LINE.
DATA: IT_TVGRT TYPE TABLE OF TVGRT WITH HEADER LINE.
DATA: IT_TVKBT TYPE TABLE OF TVKBT WITH HEADER LINE.
DATA: IT_TVTWT TYPE TABLE OF TVTWT WITH HEADER LINE.
DATA: IT_TVKOT TYPE TABLE OF TVKOT WITH HEADER LINE.
DATA: IT_ZTSD201 TYPE TABLE OF ZTSD201 WITH HEADER LINE.
RANGES: S_NXKH FOR KNA1-KUNNR.

RANGES: S_SEGMENT FOR FAGL_SEGM-SEGMENT.
DATA LS_DATA     TYPE REF TO DATA.
DATA:BEGIN OF GS_ITAB,
       WADAT_IST TYPE VBAK-ERDAT,
       POSID     TYPE PRPS-POSID,
       ZQMWL     TYPE DMBTR,
     END OF GS_ITAB,
     GT_ITAB LIKE TABLE OF GS_ITAB,
     S_POSID TYPE RANGE OF COBL-PS_POSID.
SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE T2.
  SELECT-OPTIONS:
    S_VKORG FOR  VBAK-VKORG MEMORY ID R0,
    S_VTWEG FOR  VBAK-VTWEG MEMORY ID R5,
    S_KUNNR FOR  KNA1-KUNNR MEMORY ID R1,
    S_NAME1 FOR  KNA1-NAME1  MEMORY ID R2 NO INTERVALS,
    S_PS    FOR  COBL-PS_POSID  MEMORY ID R3 MATCHCODE OBJECT ZF4_POSID,
    S_POST1    FOR  PRPS-POST1  MEMORY ID R4,
    S_ZHTLY FOR VBAK-KUNNR MEMORY ID ZGH.        "ADD by qidawei 20230823.
  PARAMETERS P_X TYPE CHAR1 AS CHECKBOX.
  PARAMETERS:P1  AS CHECKBOX DEFAULT 'X'. "不包含内购内销
SELECTION-SCREEN END OF BLOCK B2.


AT SELECTION-SCREEN OUTPUT.
  T2 = '选择条件'.

START-OF-SELECTION.

  CLEAR:S_SEGMENT[].
  IF S_VTWEG[] IS NOT INITIAL.

    SELECT DISTINCT
       ZFICO_CONF_008~SEGMENT
      FROM ZFICO_CONF_008
      INNER JOIN ZTSD204 ON ZFICO_CONF_008~WERKS = ZTSD204~WERKS
      WHERE ZTSD204~VTWEG IN @S_VTWEG
      ORDER BY SEGMENT
      INTO TABLE @DATA(IT_SEGMENT)
      .
    LOOP AT IT_SEGMENT INTO DATA(SEGMENT).
      CLEAR: S_SEGMENT.
      S_SEGMENT(3) = 'IEQ'.
      S_SEGMENT-LOW = SEGMENT-SEGMENT.
      COLLECT S_SEGMENT.
    ENDLOOP.

  ENDIF.

  LOOP AT S_PS.
    S_PSPNR-SIGN = S_PS-SIGN.
    S_PSPNR-OPTION = S_PS-OPTION.
    IF S_PS-LOW IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
        EXPORTING
          INPUT  = S_PS-LOW
        IMPORTING
          OUTPUT = S_PSPNR-LOW.
    ENDIF.
    IF S_PS-HIGH IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
        EXPORTING
          INPUT  = S_PS-HIGH
        IMPORTING
          OUTPUT = S_PSPNR-HIGH.
    ENDIF.
    APPEND S_PSPNR.
  ENDLOOP.

  PERFORM GETDATA.

*  IF SY-BATCH = 'X'.
*
*    DATA: TOKEN   TYPE STRING,
*          KEYWORD TYPE STRING,
*          MESS    TYPE STRING,
*          ZYK     TYPE STRING,
*          ZHTLYT  TYPE STRING,
*          ZHFHD   TYPE STRING.
*
*    CLEAR:S_NXKH[].
*    S_NXKH = 'IEQ0000903080'. APPEND S_NXKH.
*    SORT ITAB BY ZHTLYT ZYK.
*    SELECT SINGLE
*       *
*      INTO @DATA(ZTSD230)
*      FROM ZTSD230
*      WHERE ZMOKUAI = 'SD'
*       AND  ZLEIXING = 'ZSD212_LYWLYETX'
*       .
*
*    CLEAR:MESS,TOKEN,KEYWORD.
*
*    TOKEN = ZTSD230-TOKEN.
*    KEYWORD = ZTSD230-KEYWORD.
*
*    LOOP AT ITAB INTO DATA(WATAB).
*      IF ABS( WATAB-ZYK ) <= 50 AND ABS( WATAB-ZYK ) > 0  AND WATAB-PRART = 'Y2'AND WATAB-KUNNR NOT IN S_NXKH.
*        ZYK    = WATAB-ZYK.
*        ZHTLYT = WATAB-ZHTLYT.
*        IF ZHTLYT IS INITIAL.
*          SELECT
*          SINGLE
*          KNA1~NAME1
*          FROM ZTPS010A
*          INNER JOIN KNA1 ON ZTPS010A~ZKFNR = KNA1~KUNNR
*          INTO WATAB-ZHTLYT
*          WHERE ZTPS010A~POST1 = WATAB-POST1.
*          ZHTLYT = WATAB-ZHTLYT.
*        ENDIF.
*        ZHFHD  = WATAB-ZHFHD.
*        IF WATAB-ZHFHD < WATAB-ZHHKD.
*          ZHFHD  = WATAB-ZHHKD.
*        ENDIF.
*        IF WATAB-ZYK  < 10 AND  WATAB-ZYK > 0 .
*          "余款前强行拼接一个空格 保证推送消息排版
*          CONCATENATE  '' ZYK  INTO ZYK SEPARATED BY ' '.
*        ENDIF.
**        DATA(I) =  .
*        IF STRLEN( ZHTLYT ) = 2 .
*          "余款前强行拼接一个空格 保证推送消息排版
*          CONCATENATE  '' ZHTLYT  INTO ZHTLYT  SEPARATED BY ' '.
*        ENDIF.
*        CONCATENATE MESS ZHFHD '\t' ZHTLYT  '\t' ZYK  '\t'  WATAB-POST1  ' \n '  INTO MESS.
*      ENDIF.
*    ENDLOOP.
*
*    CALL FUNCTION 'ZFM_GP_DD_QXXTX'
*      EXPORTING
*        TOKEN   = TOKEN
*        KEYWORD = KEYWORD
*        MESS    = MESS.
*
*
*    RETURN.
*  ENDIF.

  PERFORM ALVSHOW.
*&---------------------------------------------------------------------*
*& Form GETDATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM GETDATA .

  PERFORM GETTABDATA(ZPUBFORM) TABLES IT_TVKOT USING 'TVKOT' ''.
  PERFORM GETTABDATA(ZPUBFORM) TABLES IT_KNA1 USING 'KNA1' ''.
  PERFORM GETTABDATA(ZPUBFORM) TABLES IT_TVAKT USING 'TVAKT' ''.
  PERFORM GETTABDATA(ZPUBFORM) TABLES IT_TVKBT USING 'TVKBT' ''.
  PERFORM GETTABDATA(ZPUBFORM) TABLES IT_TVTWT USING 'TVTWT' ''.
  PERFORM GETTABDATA(ZPUBFORM) TABLES IT_TVGRT USING 'TVGRT' ''.
  PERFORM GETTABDATA(ZPUBFORM) TABLES IT_T001L USING 'T001L' ''.
  PERFORM GETTABDATA(ZPUBFORM) TABLES IT_T001W USING 'T001W' ''.
  PERFORM GETTABDATA(ZPUBFORM) TABLES IT_T005U USING 'T005U' ''.
  PERFORM GETTABDATA(ZPUBFORM) TABLES IT_TCJ1T USING 'TCJ1T' ''.

*获取回款额度
  SELECT
    ZTFI_SPLITCONT~PARTNER
    ZTFI_SPLITCONT~DMBTR
    ZTFI_SPLITCONT~DMBTRB
    ZTFI_SPLITCONT~ZNAME
    ZTFI_SPLITCONT~ZDJBH
    ZTFI_SPLITCONT~CFDAT
    ZTFI_SPLITCONT~SEGMENT
    ZTFI_SPLITCONT~ZSIGN
    PRPS~POSID
    PRPS~POST1
    PRPS~PSPHI
    PRPS~PSPNR
    PRPS~PRART
    ZTFI_SPLITCONT~BUKRS AS VKORG
    FROM ZTFI_SPLITCONT
    INNER JOIN KNA1 ON KNA1~KUNNR = ZTFI_SPLITCONT~PARTNER
*update by qidawei 20230925
    INNER JOIN PRPS ON PRPS~PSPNR = ZTFI_SPLITCONT~PSPNR AND PRPS~PBUKR = ZTFI_SPLITCONT~BUKRS
    INTO CORRESPONDING FIELDS OF TABLE IT_HK
    WHERE ZTFI_SPLITCONT~PARTNER IN S_KUNNR
    AND  ZTFI_SPLITCONT~PSPNR IN S_PSPNR
    AND  PRPS~PRART = 'Y2'
    AND  PRPS~POST1 IN S_POST1
    AND  KNA1~NAME1 IN S_NAME1
    AND  ZTFI_SPLITCONT~ZSIGN IN ( '1','' )
    AND  ZTFI_SPLITCONT~BUKRS IN S_VKORG
    AND  ZTFI_SPLITCONT~SEGMENT IN S_SEGMENT " ADD HANWQ 20230628
    .

  DELETE IT_HK WHERE ZSIGN = '' AND ZDJBH(4) = 'ZQZY'.

*获取退款金额
  SELECT
    ZTFI_PYREHD~LIFNR AS PARTNER
    ZTFI_PYREHD~DMBTR_PLN AS DMBTR
    ZTFI_PYREHD~ZOAUSER AS ZNAME
    ZTFI_PYREHD~ZOANO AS ZDJBH
    ZTFI_PYREHD~ZREDAT AS CFDAT
    ZTFI_PYREHD~SEGMENT
    PRPS~POSID
    PRPS~POST1
    PRPS~PSPHI
    PRPS~PSPNR
    PRPS~PRART
    ZTFI_PYREHD~BUKRS AS VKORG
    FROM ZTFI_PYREHD
    INNER JOIN KNA1 ON KNA1~KUNNR = ZTFI_PYREHD~LIFNR
*update By qidawei on 20240226 增加 AND PRPS~PBUKR = ZTFI_PYREHD~BUKRS 排除前期财务因为WBS退款时没有校验销售组织的异常数据。
    INNER JOIN PRPS ON PRPS~POSID = ZTFI_PYREHD~PSPID AND PRPS~PBUKR = ZTFI_PYREHD~BUKRS
    INTO CORRESPONDING FIELDS OF TABLE IT_TK
    WHERE ZTFI_PYREHD~LIFNR IN S_KUNNR
    AND PRPS~PSPNR IN S_PSPNR
    AND  PRPS~PRART = 'Y2'
    AND PRPS~POST1 IN S_POST1
    AND KNA1~NAME1 IN S_NAME1
    AND ZTFI_PYREHD~ZPRSTUS IN ( '20' , '28' )
    AND ZTFI_PYREHD~ZPYCAT IN ( 'KD', 'KY', 'KH', 'KC' )
    AND ZTFI_PYREHD~BUKRS IN S_VKORG
    AND ZTFI_PYREHD~SEGMENT IN S_SEGMENT " ADD HANWQ 20230628
    .

  IT_HK3[] = IT_HK[].

  LOOP AT IT_TK.
    MOVE-CORRESPONDING IT_TK TO IT_HK.
    IT_HK-DMBTR  = 0 - IT_TK-DMBTR.
    IT_HK-DMBTRB = 0 - IT_TK-DMBTR." MODIFY BY LZF 21.04.2023 09:49:31
    APPEND IT_HK.
    CLEAR:IT_TK.
  ENDLOOP.

  SORT IT_HK3 DESCENDING BY CFDAT.
  DELETE ADJACENT DUPLICATES FROM IT_HK3 COMPARING PSPNR PARTNER.
*按照项目+公司代码+客户汇总回款
  LOOP AT IT_HK.
    IT_HK1-POSID = IT_HK-POSID.
    IT_HK1-POST1 = IT_HK-POST1.
    IT_HK1-PARTNER = IT_HK-PARTNER.
    IT_HK1-VKORG = IT_HK-VKORG.
    IT_HK1-DMBTR = IT_HK-DMBTR.
    IT_HK1-DMBTRB = IT_HK-DMBTRB.
    IT_HK1-PSPHI = IT_HK-PSPHI.
    IT_HK1-PSPNR = IT_HK-PSPNR.
    IT_HK1-PRART = IT_HK-PRART.
    IF IT_HK-SEGMENT = '0000003000' OR IT_HK-SEGMENT = '0000003060' OR IT_HK-SEGMENT = '0000003990' OR IT_HK-SEGMENT = '0000003200'.
      IT_HK1-VTWEG = '10'.
    ELSEIF IT_HK-SEGMENT = '0000003020' OR IT_HK-SEGMENT = '0000003062' OR IT_HK-SEGMENT = '0000003100'.
      IT_HK1-VTWEG = '20'.
    ELSEIF IT_HK-SEGMENT = '0000003080'.
      IT_HK1-VTWEG = '30'.
    ELSEIF IT_HK-SEGMENT = '0000003050'.
      IT_HK1-VTWEG = '50'.
    ELSEIF IT_HK-SEGMENT = '0000003090'.
      IT_HK1-VTWEG = '60'.
    ENDIF.
    COLLECT IT_HK1.
    CLEAR:IT_HK1,IT_HK.
  ENDLOOP.

  SORT IT_HK1 BY POSID PARTNER VKORG VTWEG.

*获取已开票历史金额
  SELECT VBRP~KZWI1
  VBRP~VBTYP_ANA
  VBRP~AUBEL
  VBRP~AUPOS
  VBRP~VBELN AS VBELP
  VBRP~POSNR AS POSNP
  VBRP~VGBEL AS VBELV
  VBRP~VGPOS AS POSNV
  VBRP~MATNR
  VBRP~PS_PSP_PNR AS PSPNR
  VBRP~FKIMG
  VBRK~FKART
  VBRK~VKORG
  VBRK~VTWEG
  VBRK~FKDAT
  VBRK~KUNRG AS KUNNR
  VBRK~ERNAM
  PRPS~POSID
  PRPS~POST1
  PRPS~PSPHI
  PRPS~PRART
  FROM VBRP
  INNER JOIN VBRK ON VBRP~VBELN = VBRK~VBELN
  INNER JOIN PRPS ON PRPS~PSPNR = VBRP~PS_PSP_PNR
  INNER JOIN KNA1 ON VBRK~KUNRG = KNA1~KUNNR
  INTO CORRESPONDING FIELDS OF TABLE IT_VBRP
  WHERE VBRP~PS_PSP_PNR IN S_PSPNR
  AND VBRK~KUNAG IN S_KUNNR
  AND VBRP~VBTYP_ANA NOT IN ( 'N','S','U' )
  AND  VBRP~VF_STATUS_ANA NOT IN ('', 'C')
  AND VBRK~FKSTO <> 'X'
  AND VBRK~SFAKN = ''
  AND  PRPS~PRART = 'Y2'
  AND  PRPS~POST1 IN S_POST1
  AND  KNA1~NAME1 IN S_NAME1
  AND  VBRP~FKIMG <> 0
  AND  VBRK~VKORG IN S_VKORG
  AND  VBRK~VTWEG IN S_VTWEG.

REFRESH GT_PSPID.
*开票明细数据赋值ITAB
  LOOP AT IT_VBRP.
    CLEAR ITAB.
    ITAB-KUNNR = IT_VBRP-KUNNR.
    ITAB-VTWEG = IT_VBRP-VTWEG.
    ITAB-POSID = IT_VBRP-POSID.
    ITAB-PSPNR = IT_VBRP-PSPNR.
    ITAB-POST1 = IT_VBRP-POST1.
    ITAB-PSPHI = IT_VBRP-PSPHI.
    ITAB-PRART = IT_VBRP-PRART.
    ITAB-VKORG = IT_VBRP-VKORG.
    IF IT_VBRP-VBTYP_ANA = 'H' OR IT_VBRP-VBTYP_ANA = 'O'.
      ITAB-ZYSJE = 0 - IT_VBRP-KZWI1.
    ELSE.
      ITAB-ZYSJE = IT_VBRP-KZWI1.
    ENDIF.
    COLLECT ITAB.
    IT_PSPNR-PSPNR = IT_VBRP-PSPNR.
    IT_PSPNR-POSID = IT_VBRP-POSID.
    IT_PSPNR-KUNNR = IT_VBRP-KUNNR.
    COLLECT IT_PSPNR.
    GS_PSPID-PSPID = ITAB-POSID+0(8).
    COLLECT GS_PSPID INTO GT_PSPID.
  ENDLOOP.

*获取未开票已发货明细数据
  SELECT
    LIPS~VBELN
    LIPS~POSNR
    LIPS~MATNR
    LIKP~LFART
    VBAP~PS_PSP_PNR AS PSPNR
    VBAP~VBELN AS VGBEL
    VBAP~POSNR AS VGPOS
    LIPS~LFIMG
    LIPS~WERKS
    LIPS~VTWEG
    VBAK~KUNNR AS KUNNR
    LIKP~WADAT_IST
    PRPS~POSID
    PRPS~POST1
    PRPS~PSPHI
    PRPS~PRART
    VBAK~VKORG
    FROM LIPS
    INNER JOIN LIKP ON LIKP~VBELN = LIPS~VBELN
    INNER JOIN VBAP ON VBAP~VBELN = LIPS~VGBEL AND VBAP~POSNR = LIPS~VGPOS
    INNER JOIN VBAK ON VBAK~VBELN = VBAP~VBELN
    INNER JOIN PRPS ON PRPS~PSPNR = VBAP~PS_PSP_PNR
    INNER JOIN KNA1 ON KNA1~KUNNR = VBAK~KUNNR     "Add by Qidawei On 20240422
    INTO CORRESPONDING FIELDS OF TABLE IT_LIPS
    WHERE VBAP~PS_PSP_PNR IN S_PSPNR
    AND VBAK~KUNNR IN S_KUNNR
    AND  KNA1~NAME1 IN S_NAME1 "Add by Qidawei On 20240422
    AND  PRPS~POST1 IN S_POST1
    AND  PRPS~PRART = 'Y2'
    AND  LIPS~LFIMG <> 0
    AND  LIKP~WBSTK = 'C'
    AND  LIPS~FKSTA IN ( '' ,'A' )
    AND  VBAK~AUART NOT IN ( 'ZBV1','ZSO' )
    AND  VBAK~VKORG IN S_VKORG
    AND  VBAK~VTWEG IN S_VTWEG.

*获取交货单的明细对应订单的价格
*先各行数量*单价在得出金额后进行汇总
  LOOP AT IT_LIPS.
    IT_ZFH-VBELN = IT_LIPS-VGBEL.
    IT_ZFH-POSNR = IT_LIPS-VGPOS.
    COLLECT IT_ZFH.
    CLEAR:IT_ZFH.
  ENDLOOP.

  IF IT_ZFH[] IS NOT INITIAL.
    SELECT VBAK~VBELN
           V_KONV_CDS~KPOSN
           V_KONV_CDS~KBETR
           V_KONV_CDS~KPEIN
        FROM V_KONV_CDS
       INNER JOIN VBAK ON VBAK~KNUMV =  V_KONV_CDS~KNUMV
       INTO CORRESPONDING FIELDS OF TABLE IT_KONV
       FOR ALL ENTRIES IN IT_ZFH
       WHERE VBAK~VBELN = IT_ZFH-VBELN
       AND   V_KONV_CDS~KPOSN = IT_ZFH-POSNR
       AND   V_KONV_CDS~KSCHL = 'ZPR0'
       AND  V_KONV_CDS~KINAK = ''.
    SORT IT_KONV BY VBELN KPOSN.
  ENDIF.

  LOOP AT IT_LIPS.
    CLEAR ITAB.
    ITAB-KUNNR = IT_LIPS-KUNNR.
    ITAB-VTWEG = IT_LIPS-VTWEG.
    ITAB-VKORG = IT_LIPS-VKORG.
    ITAB-POSID = IT_LIPS-POSID.
    ITAB-PSPNR = IT_LIPS-PSPNR.
    ITAB-POST1 = IT_LIPS-POST1.
    ITAB-PSPHI = IT_LIPS-PSPHI.
    ITAB-PRART = IT_LIPS-PRART.

    READ TABLE IT_KONV WITH KEY VBELN = IT_LIPS-VGBEL KPOSN = IT_LIPS-VGPOS BINARY SEARCH.
    IF SY-SUBRC = 0.
      IF IT_LIPS-LFART = 'LR' OR IT_LIPS-LFART = 'ZLR'.
        ITAB-ZYSJE = 0 - IT_LIPS-LFIMG * IT_KONV-KBETR / IT_KONV-KPEIN.
      ELSE.
        ITAB-ZYSJE = IT_LIPS-LFIMG * IT_KONV-KBETR / IT_KONV-KPEIN.
      ENDIF.
    ENDIF.
    IT_PSPNR-PSPNR = IT_LIPS-PSPNR.
    IT_PSPNR-POSID = IT_LIPS-POSID.
    IT_PSPNR-KUNNR = IT_LIPS-KUNNR.
    COLLECT IT_PSPNR.
    COLLECT ITAB.
    GS_PSPID-PSPID = ITAB-POSID+0(8).
    COLLECT GS_PSPID INTO GT_PSPID.
    CLEAR:ITAB,IT_LIPS.
  ENDLOOP.

  SORT ITAB BY POSID KUNNR  VKORG VTWEG .

*获取回款但无应收的明细
  LOOP AT IT_HK1.
    READ TABLE ITAB WITH KEY  POSID = IT_HK1-POSID KUNNR = IT_HK1-PARTNER VKORG = IT_HK1-VKORG VTWEG = IT_HK1-VTWEG BINARY SEARCH.
    IF SY-SUBRC <> 0.
      MOVE-CORRESPONDING IT_HK1 TO IT_HK2.
      COLLECT IT_HK2.
    ENDIF.
    IT_PSPNR-PSPNR = IT_HK1-PSPNR.
    IT_PSPNR-POSID = IT_HK1-POSID.
    IT_PSPNR-KUNNR = IT_HK1-PARTNER.
    COLLECT IT_PSPNR.
    GS_PSPID-PSPID = IT_HK1-POSID+0(8).
    COLLECT GS_PSPID INTO GT_PSPID.
    CLEAR:IT_HK2,IT_PSPNR.
  ENDLOOP.

  " 项目完工日期  2024-08-03 14:21:38 by lmw
  SELECT
    Z01~PSPID,
    Z01~ZXMWGRQ
  FROM ZTPS010A AS Z01
  INNER JOIN @GT_PSPID AS PD ON Z01~PSPID = PD~PSPID
  WHERE Z01~DELE = ''
  ORDER BY Z01~PSPID
  INTO TABLE @DATA(LT_Z010A).

  IF IT_PSPNR[] IS NOT INITIAL.
*获取最后一次出货日期
    SELECT LIKP~WADAT_IST
           VBAP~PS_PSP_PNR AS PSPNR
           LIKP~KUNNR
           VBAK~ZHTLY
           VBAK~ZYWY
           VBAK~VKBUR
           VBAK~VKGRP
           VBAK~VBELN
           VBAK~WAERK
      FROM LIKP
      INNER JOIN LIPS ON LIKP~VBELN = LIPS~VBELN
      INNER JOIN VBAP ON LIPS~VGBEL = VBAP~VBELN AND LIPS~VGPOS = VBAP~POSNR
      INNER JOIN VBAK ON VBAP~VGBEL = VBAK~VBELN
      INTO CORRESPONDING FIELDS OF TABLE IT_ZHTXX
      FOR ALL ENTRIES IN IT_PSPNR
      WHERE VBAP~PS_PSP_PNR = IT_PSPNR-PSPNR
       AND  VBAK~KUNNR = IT_PSPNR-KUNNR
       AND  LIKP~WBSTK = 'C'.
    SORT IT_ZHTXX BY WADAT_IST DESCENDING.
    DELETE ADJACENT DUPLICATES FROM IT_ZHTXX COMPARING PSPNR KUNNR.
    SORT IT_ZHTXX BY PSPNR KUNNR WADAT_IST DESCENDING.

    SELECT * FROM ZTSD201
      INTO CORRESPONDING FIELDS OF TABLE IT_ZTSD201
      FOR ALL ENTRIES IN IT_PSPNR
      WHERE ZTSD201~POSID = IT_PSPNR-POSID AND
            ZTSD201~KUNNR = IT_PSPNR-KUNNR.
*无合同无履约
    SELECT FROM VBAK AS A
      FIELDS A~PS_PSP_PNR AS PSPNR,
      A~ZHTLY,
      A~ZYWY,
      A~ERDAT
      FOR ALL ENTRIES IN @IT_PSPNR
      WHERE A~PS_PSP_PNR = @IT_PSPNR-PSPNR
      AND A~VBTYP = 'G'
      INTO CORRESPONDING FIELDS OF TABLE @IT_ZHTLY.
    SORT IT_ZHTLY BY PSPNR ERDAT DESCENDING.
    DELETE ADJACENT DUPLICATES FROM IT_ZHTLY COMPARING PSPNR .

    IF IT_ZHTLY[] IS NOT INITIAL.
      SELECT
        KNA1~KUNNR,
        KNA1~NAME1
        FROM KNA1
        FOR ALL ENTRIES IN @IT_ZHTLY
        WHERE KNA1~KUNNR = @IT_ZHTLY-ZHTLY
        ORDER BY PRIMARY KEY
        INTO TABLE @DATA(ZHTNM).
      SELECT
        KNA1~KUNNR,
        KNA1~NAME1
        FROM KNA1
        FOR ALL ENTRIES IN @IT_ZHTLY
        WHERE KNA1~KUNNR = @IT_ZHTLY-ZYWY
        ORDER BY PRIMARY KEY
        INTO TABLE @DATA(ZYWNM).
      SORT ZHTNM BY KUNNR.
      SORT ZYWNM BY KUNNR.
    ENDIF.
*有无合同
    SELECT FROM VBAK AS A
      FIELDS A~PS_PSP_PNR AS PSPNR,
      A~VBELN,
      A~KUNNR,
      A~WAERK,
      A~ERDAT
     FOR ALL ENTRIES IN @IT_PSPNR
      WHERE A~PS_PSP_PNR = @IT_PSPNR-PSPNR
      AND A~KUNNR = @IT_PSPNR-KUNNR
      AND  A~VBTYP = 'G'
      INTO CORRESPONDING FIELDS OF TABLE @IT_WAERK.
    SORT IT_WAERK BY PSPNR KUNNR VBELN ERDAT.
    DELETE ADJACENT DUPLICATES FROM IT_WAERK COMPARING PSPNR KUNNR.
  ENDIF.

  SORT IT_KNA1 BY KUNNR.
*按照项目+客户+公司+渠道
  LOOP AT ITAB.
*获取最后一笔发货合同的履约、业务、部门信息
    READ TABLE IT_ZHTXX WITH KEY PSPNR = ITAB-PSPNR KUNNR = ITAB-KUNNR BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-ZHTLY = IT_ZHTXX-ZHTLY.
      ITAB-ZHFHD = IT_ZHTXX-WADAT_IST.
      ITAB-ZYWY = IT_ZHTXX-ZYWY.
      ITAB-ZHTH = IT_ZHTXX-VBELN.
    ELSE.
      READ TABLE IT_ZHTLY WITH KEY PSPNR = ITAB-PSPNR BINARY SEARCH.
      IF SY-SUBRC = 0.
        ITAB-ZHTLY = IT_ZHTLY-ZHTLY.
        ITAB-ZYWY = IT_ZHTLY-ZYWY.
        READ TABLE ZHTNM INTO DATA(WA_HT) WITH KEY KUNNR = ITAB-ZHTLY BINARY SEARCH.
        IF SY-SUBRC = 0.
          ITAB-ZHTLYT = WA_HT-NAME1.
        ENDIF.
        READ TABLE ZYWNM INTO DATA(WA_YW) WITH KEY KUNNR = ITAB-ZYWY BINARY SEARCH.
        IF SY-SUBRC = 0.
          ITAB-ZYWYT = WA_YW-NAME1.
        ENDIF.
      ENDIF.
    ENDIF.
*OCP合同号
    IF ITAB-ZHTH IS NOT INITIAL.
      SELECT SINGLE VBAK~BSTNK INTO ITAB-BSTNK FROM VBAK WHERE VBAK~VBELN = ITAB-ZHTH.
    ENDIF.
**获取实收金额
*    READ TABLE it_hk1 WITH KEY posid = itab-posid partner = itab-kunnr vkorg = itab-vkorg vtweg = itab-vtweg BINARY SEARCH.
*    IF sy-subrc = 0.
*      IF it_zhtxx-waerk = 'CNY'.
*        itab-zssje = it_hk1-dmbtrb.
*      ELSE.
*        itab-zssje = it_hk1-dmbtr.
*      ENDIF.
*    ENDIF.
    CLEAR IT_WAERK.
    READ TABLE IT_WAERK WITH KEY PSPNR = ITAB-PSPNR KUNNR = ITAB-KUNNR BINARY SEARCH.
    IF SY-SUBRC NE 0.
      CLEAR IT_HK1.
      READ TABLE IT_HK1 WITH KEY POSID = ITAB-POSID PARTNER = ITAB-KUNNR BINARY SEARCH.
      IF SY-SUBRC = 0.
        ITAB-ZSSJE = IT_HK1-DMBTRB.
      ENDIF.
    ELSE.
      IF IT_WAERK-WAERK = 'CNY'.
        CLEAR IT_HK1.
        READ TABLE IT_HK1 WITH KEY POSID = ITAB-POSID PARTNER = ITAB-KUNNR BINARY SEARCH.
        IF SY-SUBRC = 0.
          ITAB-ZSSJE = IT_HK1-DMBTRB.
        ENDIF.
      ELSE.
        CLEAR IT_HK1.
        READ TABLE IT_HK1 WITH KEY POSID = ITAB-POSID PARTNER = ITAB-KUNNR BINARY SEARCH.
        IF SY-SUBRC = 0.
          ITAB-ZSSJE = IT_HK1-DMBTR.
        ENDIF.
      ENDIF.
    ENDIF.
    ITAB-ZYK = ITAB-ZYSJE - ITAB-ZSSJE.
*获取合同的履约、业务、部门的描述信息
    READ TABLE IT_KNA1 WITH  KEY KUNNR = ITAB-KUNNR BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-NAME1 = IT_KNA1-NAME1.
    ENDIF.
    READ TABLE IT_KNA1 WITH  KEY KUNNR = ITAB-ZHTLY BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-ZHTLYT = IT_KNA1-NAME1.
    ENDIF.
    READ TABLE IT_KNA1 WITH  KEY KUNNR = ITAB-ZYWY BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-ZYWYT = IT_KNA1-NAME1.
    ENDIF.
    READ TABLE IT_TVKBT WITH  KEY VKBUR = ITAB-VKBUR SPRAS = '1' BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-VKBURT = IT_TVKBT-BEZEI.
    ENDIF.
    READ TABLE IT_TVTWT WITH  KEY VTWEG = ITAB-VTWEG SPRAS = '1' BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-VTWEGT = IT_TVTWT-VTEXT.
    ENDIF.
    READ TABLE IT_TVGRT WITH  KEY VKGRP = ITAB-VKGRP SPRAS = '1' BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-VKGRPT = IT_TVGRT-BEZEI.
    ENDIF.
    READ TABLE IT_TVKOT WITH  KEY VKORG = ITAB-VKORG SPRAS = '1' BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-VKORGT = IT_TVKOT-VTEXT.
    ENDIF.
    SORT IT_HK3 BY PSPNR PARTNER CFDAT DESCENDING.
    READ TABLE IT_HK3  WITH KEY PSPNR = ITAB-PSPNR PARTNER = ITAB-KUNNR BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-ZHHKD = IT_HK3-CFDAT.
    ENDIF.
    READ TABLE IT_TCJ1T  WITH KEY PRART = ITAB-PRART LANGU = '1' BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-PRARTT = IT_TCJ1T-PRATX.
    ENDIF.
    LOOP AT IT_ZTSD201 WHERE POSID = ITAB-POSID AND KUNNR = ITAB-KUNNR.
      ITAB-ZSXJE = ITAB-ZSXJE + IT_ZTSD201-ZSQED.
      ITAB-ZHZY  = ITAB-ZHZY + IT_ZTSD201-ZCHZY.
      CLEAR:IT_ZTSD201.
    ENDLOOP.
    MODIFY ITAB.
    CLEAR:ITAB,IT_HK1,IT_HK3,IT_TVKOT,IT_TVGRT,IT_TVTWT,IT_TVKBT,IT_KNA1,IT_ZHTXX.
  ENDLOOP.

*拼接已回款未发货明细
  "ADD HANWQ 20230607
  SORT IT_HK BY POSID CFDAT DESCENDING.
  LOOP AT IT_HK2.
    ITAB-KUNNR = IT_HK2-PARTNER.
    READ TABLE IT_KNA1 WITH  KEY KUNNR = ITAB-KUNNR BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-NAME1 = IT_KNA1-NAME1.
    ENDIF.
    ITAB-VTWEG = IT_HK2-VTWEG.
    READ TABLE IT_TVTWT WITH  KEY VTWEG = ITAB-VTWEG SPRAS = '1' BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-VTWEGT = IT_TVTWT-VTEXT.
    ENDIF.
    ITAB-VKORG = IT_HK2-VKORG.
    READ TABLE IT_TVKOT WITH  KEY VKORG = ITAB-VKORG SPRAS = '1' BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-VKORGT = IT_TVKOT-VTEXT.
    ENDIF.
    ITAB-POSID = IT_HK2-POSID.
    ITAB-PSPNR = IT_HK2-PSPNR.
    ITAB-POST1 = IT_HK2-POST1.
    ITAB-PSPHI = IT_HK2-PSPHI.
*    READ TABLE it_zhtxx WITH KEY pspnr = itab-pspnr kunnr = itab-kunnr BINARY SEARCH.
*    IF sy-subrc = 0.
*      IF it_zhtxx-waerk = 'CNY'.
*        itab-zssje = it_hk2-dmbtrb.
*      ELSE.
*        itab-zssje = it_hk2-dmbtr.
*      ENDIF.
*    ENDIF.
*    itab-zssje = it_hk2-dmbtr.
    CLEAR IT_WAERK.
    READ TABLE IT_WAERK WITH KEY PSPNR = ITAB-PSPNR KUNNR = ITAB-KUNNR BINARY SEARCH.
    IF SY-SUBRC NE 0.
      ITAB-ZSSJE = IT_HK2-DMBTRB.
    ELSE.
      IF IT_WAERK-WAERK = 'CNY'.
        ITAB-ZSSJE = IT_HK2-DMBTRB.
      ELSE.
        ITAB-ZSSJE = IT_HK2-DMBTR.
      ENDIF.
    ENDIF.
    ITAB-ZYK  = ITAB-ZYSJE - ITAB-ZSSJE.
    ITAB-PRART  = IT_HK2-PRART.
    READ TABLE IT_TCJ1T  WITH KEY PRART = ITAB-PRART LANGU = '1' BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-PRARTT = IT_TCJ1T-PRATX.
    ENDIF.
    LOOP AT IT_ZTSD201 WHERE POSID = ITAB-POSID AND KUNNR = ITAB-KUNNR.
      ITAB-ZSXJE = ITAB-ZSXJE + IT_ZTSD201-ZSQED.
      ITAB-ZHZY  = ITAB-ZHZY + IT_ZTSD201-ZCHZY.
      CLEAR:IT_ZTSD201.
    ENDLOOP.
*    SORT IT_HK BY POSID.
    READ TABLE IT_HK WITH KEY POSID = ITAB-POSID BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-ZHHKD = IT_HK-CFDAT.
    ENDIF.
    APPEND ITAB.
    CLEAR:IT_PSPNR,ITAB,IT_KNA1,IT_HK2,IT_TVKOT,IT_TVTWT.
  ENDLOOP.
  LOOP AT ITAB.
    READ TABLE LT_Z010A INTO DATA(LS_Z010A) WITH KEY PSPID = ITAB-POSID+0(8) BINARY SEARCH.
    IF SY-SUBRC = 0.
      ITAB-ZXMWGRQ = LS_Z010A-ZXMWGRQ.
      MODIFY ITAB TRANSPORTING ZXMWGRQ.
    ENDIF.
  ENDLOOP.
  "只查询项目类型等于Y2的，且没有发起完工报告的且余额=0的
  DELETE ITAB WHERE ZYK NE 0 OR ZXMWGRQ IS NOT INITIAL.

*权限控制
  LOOP AT ITAB.
    AUTHORITY-CHECK OBJECT 'ZWSD01'
    ID 'VTWEG' FIELD ITAB-VTWEG.
    IF SY-SUBRC = 0.
      ITAB-ZQXGL = 'SAVE'.
    ENDIF.
    MODIFY ITAB TRANSPORTING ZQXGL.
  ENDLOOP.

  DELETE ITAB WHERE ZQXGL <> 'SAVE'.
  CALL FUNCTION 'ZFM_SD_AUTHCONTROL'
    EXPORTING
      AUTHACT = 'A'
      DJLX    = 'HT'
    TABLES
      INTAB   = ITAB.
  IF ITAB[] IS INITIAL.
    MESSAGE S000(OO) WITH '无数据'.
  ENDIF.
*&**********钢品外贸客户名称隐藏 BY LZF 10.08.2023 11:14:21
  IF ITAB[] IS NOT INITIAL.
    SELECT
      POSID,
      PROFL
      INTO TABLE @DATA(IT_PROJ)
      FROM PRPS AS A
      INNER JOIN PROJ AS B ON A~PSPHI = B~PSPNR
      FOR ALL ENTRIES IN @ITAB
      WHERE A~POSID = @ITAB-POSID AND B~PROFL = 'ZPS0003'.
    LOOP AT ITAB.
      READ TABLE IT_PROJ INTO DATA(WA) WITH KEY POSID = ITAB-POSID.
      IF SY-SUBRC = 0.
        AUTHORITY-CHECK OBJECT 'ZWSD06'
                ID 'ZWMKZ' FIELD '01'.
*        IF SY-SUBRC = 0.
        IF SY-SUBRC <> 0.
          CLEAR ITAB-NAME1."清空name1字段内容
        ENDIF.
      ENDIF.
      ITAB-PSPID = ITAB-POSID(8).
      MODIFY ITAB TRANSPORTING NAME1 PSPID.
      CLEAR ITAB.
    ENDLOOP.
  ENDIF.
*&**********钢品外贸客户名称隐藏 BY LZF 10.08.2023 11:14:21

*增加履约查询条件 add qidawei by 20230831
  IF S_ZHTLY IS NOT INITIAL.
    LOOP AT S_ZHTLY.
      DELETE ITAB WHERE ZHTLY <> S_ZHTLY-LOW.
    ENDLOOP.
  ENDIF.
*增加完工报告首次提交日期I
  IF ITAB[] IS NOT INITIAL.

    SELECT * INTO TABLE @DATA(IT_WGRQ) FROM ZTSD254
    FOR ALL ENTRIES IN @ITAB WHERE PSPID = @ITAB-PSPID.

*取ZSD210A中的最后一笔单据生效日期作为平账时间


*取ZSD2POSID    10A中的最后一笔单据生效日期

    LOOP AT ITAB.
      READ TABLE IT_WGRQ INTO DATA(WA_WGRQ) WITH KEY PSPID = ITAB-PSPID.
      IF SY-SUBRC EQ 0.
        ITAB-ZWGBGRQ = WA_WGRQ-ZSCTJRQ.
        IF ( WA_WGRQ-ZSCTJRQ - ITAB-ZHFHD ) <= 45.
          ITAB-ZSFHG = '是'.
        ELSE.
          ITAB-ZSFHG = '否'.
        ENDIF.
      ENDIF.
*打勾后才进行查询
      IF P_X = 'X'.
        PERFORM GETPZSJ USING ITAB-POSID CHANGING ITAB-ZPZSJ.
      ENDIF.
      MODIFY ITAB.
    ENDLOOP.
  ENDIF.
  IF P1 = 'X'.
    DELETE ITAB WHERE KUNNR(6) = '000090'.
  ENDIF.
ENDFORM.

FORM ALVSHOW.
  PERFORM INIT_FIELDCAT TABLES FIELDCAT USING:
     'POSID' 'WBS元素' '' '' '' ''  '' '',
     'POST1' '项目名称' '' '' '' ''  '' '',
     'PRART' '项目类型' '' '' '' ''  '' '',
     'PRARTT' '项目类型描述' '' '' '' ''  '' '',
     'KUNNR' '客户编码' 'X' '' '' ''  '' '',
     'NAME1' '客户名称' '' '' '' ''  '' '',
     'ZHHKD' '最后回款日期' '' '' '' ''  '' '',
     'ZHFHD' '最后发货日期' '' '' '' ''  '' '',
     'ZWGBGRQ' '完工报告首次提交' '' '' '' ''  '' '',
     'ZSFHG' '是否合格' '' '' '' ''  '' '',
     'ZPZSJ' '平账时间' '' '' '' ''  '' '',
     'ZYSJE' '应收金额' '' '' '' ''  '' '',
     'ZSSJE' '实收金额' '' '' '' ''  '' '',
     'ZSXJE' '信用审批金额' '' '' '' ''  '' '',
     'ZHZY' '综合占用金额' '' '' '' ''  '' '',
     'ZHTLY' '合同履约编码' 'X' '' '' ''  '' '',
     'ZHTLYT' '履约名称' '' '' '' ''  '' '',
     'ZYWY' '业务员编码' 'X' '' '' ''  '' '',
     'ZYWYT' '业务员名称' '' '' '' ''  '' '',
     'ZYK' '余额' '' '' '' ''  '' '',
     'VKORG' '销售组织' '' '' '' ''  '' '',
     'VKORGT' '销售组织' '' '' '' ''  '' '',
     'VTWEG' '渠道' '' '' '' ''  '' '',
     'VTWEGT' '渠道' '' '' '' ''  '' '',
     'ZHTH' '最后发货合同号' '' '' '' ''  '' '',
     'BSTNK' 'OCP最后发货合同号' '' '' '' ''  '' ''.

  LOOP AT FIELDCAT INTO DATA(WA_FIELD1).
    CASE WA_FIELD1-FIELDNAME.
      WHEN 'NAME1' OR 'POST1' OR 'POSID'.
        WA_FIELD1-OUTPUTLEN = 40.
      WHEN OTHERS.
    ENDCASE.
    MODIFY FIELDCAT FROM WA_FIELD1 TRANSPORTING OUTPUTLEN.
  ENDLOOP.
  PERFORM ALVFM(ZPUBFORM) TABLES ITAB FIELDCAT USING '' ''.

ENDFORM.

FORM INIT_FIELDCAT TABLES OUTFIELDCAT
USING FIELDNAME SELTEXT NOZERO NOOUT HOTSPOT EDIT P_TAB P_FIELD.
  DATA:WA TYPE SLIS_FIELDCAT_ALV.
  WA-FIELDNAME = FIELDNAME.
  WA-SELTEXT_L = SELTEXT.
  WA-SELTEXT_M = SELTEXT.
  WA-SELTEXT_S = SELTEXT.
  WA-REPTEXT_DDIC = SELTEXT.
  WA-NO_OUT = NOOUT.
  WA-HOTSPOT = HOTSPOT.
  IF EDIT = 'X'.
    WA-EDIT = 'X'.
  ENDIF.
*对于数值，若有小数位但却为000，则隐藏
  CASE NOZERO.
    WHEN 'X'.
      WA-NO_ZERO = NOZERO.
    WHEN 'Y'.
      WA-NO_ZERO = 'X'.
      WA-QFIELDNAME = 'MEINS'.
  ENDCASE.

  WA-REF_TABNAME = P_TAB.
  WA-REF_FIELDNAME = P_FIELD.
  IF P_FIELD IS INITIAL.
    WA-REF_FIELDNAME = FIELDNAME.
  ENDIF.
  IF P_FIELD = 'N'.
    CLEAR:WA-REF_FIELDNAME.
  ENDIF.
  APPEND WA TO OUTFIELDCAT .
  CLEAR WA.
ENDFORM.

*响应事件
FORM USER_COMMAND USING R_UCOMM LIKE SY-UCOMM
                        RS_SELFIELD TYPE SLIS_SELFIELD.

  CASE R_UCOMM.
    WHEN '&IC1'.
      CHECK RS_SELFIELD-TABINDEX <> 0 . "小计行总计行什么的忽略
      READ TABLE ITAB INDEX RS_SELFIELD-TABINDEX.
      CASE RS_SELFIELD-FIELDNAME .
      ENDCASE.
  ENDCASE.

*ALV实时刷新
  RS_SELFIELD-ROW_STABLE = 'X'.
  RS_SELFIELD-COL_STABLE = 'X'.
  RS_SELFIELD-REFRESH = 'X'.
  CLEAR R_UCOMM.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form GETPZSJ
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> ITAB_POSID
*&      <-- ITAB_ZPZSJ
*&---------------------------------------------------------------------*
FORM GETPZSJ  USING    P_POSID
              CHANGING P_ZPZSJ.
  S_POSID = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = P_POSID ) ).
  CL_SALV_B